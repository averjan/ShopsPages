@using ShopsPages.Models
@*
    For more information on enabling MVC for empty projects, visit https://go.microsoft.com/fwlink/?LinkID=397860
*@
@{
}

@model Shop

@{
    ViewBag.Title = "Index";
}

<h3>Shops</h3>
@await Html.PartialAsync("TableView", Model)

<div>

<form method="post" id="add-form">
    <input type="text" name="Name" />
    <input type="text" name="Description" />
    <input type="hidden" name="ShopId" value="@Model.ShopId" />
    <input type="submit" value="Add" />
</form>

<button id='remove-btn' onclick="RemoveActiveProduct">Remove</button>

</div>

<div>
    <form method="put" id="edit-form">
        <input type="text" name="Name" />
        <input type="text" name="Description" />
        <input type="hidden" name="ShopId" value="@Model.ShopId" />
        <input type="hidden" name="ProductId" />
        <input type="submit" value="Edit" />
    </form>
</div>

<style>
    td {border: 1px #DDD solid; padding: 5px; cursor: pointer;}

.selected {
    background-color: brown;
    color: #FFF;
}

.id-column-hidden {
    display: none;
}
</style>

@section scripts
{
<script>
    var removeButton = document.getElementById('remove-btn');
    var table = document.getElementById('product-table');
    var activeProduct = -1;
    var model;

    $(removeButton).on("click", () => RemoveActiveProduct());
    document.getElementById("edit-form").onsubmit = () => editProduct();

    $(document).on("click", ".product-table-class tbody tr", function(event) {
        event.stopPropagation();
        event.stopImmediatePropagation();
        $(this).addClass('selected').siblings().removeClass('selected');
        var name=$(this).find('th').eq(1).html().toString();
        var description=$(this).find('th').eq(2).html().toString();
        var dbId=$(this).find('th').eq(3).html().toString();
        UpdateEditForm(name, description, dbId);
        activeProduct = dbId;
    });

    function UpdateEditForm(name, description, id) {
        console.log(id);
        $("#edit-form input[name='Name']").val(name);
        $("#edit-form input[name='ProductId']").val(id);
        $("#edit-form input[name='Description']").val(description);
    }


    function editProduct() {
        if (activeProduct < 1) {
            return;
        }

        var formData = new FormData(document.getElementById("edit-form"));
        fetch('edit', {
            method: 'put',
            body: new URLSearchParams(formData)
        })
        .then((result) => {
            return result.text();
        })
        .then ((data) => {
            $(".product-table-class").replaceWith(data);
            activeProduct = -1;
        });

        return false;
    }


    function RemoveActiveTableItem() {
        $(".product-table-class tbody").find(".selected").remove();
        console.log(activeProduct);
        activeProduct = -1;
    }


    function RemoveActiveProduct() {
        console.log(activeProduct);
        if (activeProduct < 1) {
            return;
        }

        fetch(`remove/${activeProduct}`, {
            method: 'delete',
        })
        .then((result) => result.text())
        .then(() => {
            RemoveActiveTableItem();
        });
    }


    function addRowToProductTable(product) {
        var id = $(table).find('tbody').find('tr').length + 1;
        $(table).find('tbody').append(`<tr><td>${id}</td><td>${product.name}</td><td>${product.description}</td></tr>`);
    }


    document.getElementById("add-form").onsubmit = () => {
        var formData = new FormData(document.getElementById("add-form"));
        fetch('add', {
            method: 'post',
            body: new URLSearchParams(formData)
        })
        .then((result) => {
            return result.text();
        })
        .then ((data) => {
            $(".product-table-class").replaceWith(data);
        });

        return false;
    }
</script>
}